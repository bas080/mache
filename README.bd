#!/usr/bin/env barkdown

# Mache

Cache stdout of any process.

- The code is concise and written in Bash.
- Only caches stdout of processes that exit with status code 0, which avoids
  a bunch of edge cases.
- Will re-cache when the contents of the script changes or the arguments
  supplied to it change.
- Has a REMACHE variable which will refresh your caches.

## Usage

Notice how it outputs the same date. It's using the cache.

$ mache date
$ mache date

If we supply different options it will create a new cache.

$ mache 'date -d "1 Apr 2020"'
$ mache 'date -d "2 Apr 2020"'

You can also provide a script with arguments. This does not require one to
quote the complete command.

$ mache /bin/echo hello
$ mache /bin/echo hello world

> Notice that it recomputes the cache for both commands separately. This is
> because the options are not equal.

You can also make a mache script. These scripts will cache by default. Simply
define the following shebang at the top of that script.

$ cat ./t/date

We can now run that script assuming you made it executable. (chmod +x ./t/date)

$ ./t/date

By default mache will use the cache if present. You can remake the cache:

$ REMACHE=1 ./t/date
$ sleep 2
$ REMACHE=1 ./t/date

A mache script does not cache when the script exits with non zero.

The arguments/options that are passed to the mache script are taken into
account when checking if cache should be used. Different values will result in
the mache script being re-evaluated. [memoization][3]

## Applications

### Periodic backups

Use mache to make backups every week.
Create a mache script:

$ cat $HOME/.bash_backup

Also add the following to your `.bashrc`.


$ grep 'bash_backup' < $HOME/.bashrc

This means that the backup script will be sourced every time the week number
changes. Otherwise the cache is sourced.

### Remote dependencies

Bash has no dependency management. Bash does allow one to source just about
anything. Mache allows one to depend on a remote file and cache it for offline
use. No need to re-download every time the script is run.

We can define a dependencies.sh and source it in files that depend on that
script. This project contains an example of that in the tests.

$ cat ./t/dependencies.sh

Now for the tests.

$ cat ./t/cache.t

When running the tests it will run curl only when the cache is not present or
when REMACHE is defined.

$ ./t/cache.t

Rerunning the tests will result in the cache being used. Changes to the
dependencies will have mache update the cache.

### Installation and Update

Often tools like leiningen and nvm require a bash script to be sourced. One can
simply use mache to not just install but also update these regularly. See the
periodic backup example.

### Optimization

Caches can help increase the performance considerably. It should however be
used thoughtfully.


## Tests

Tests can be run with Perl's [prove][2] command; or execute a single one:

$ ./t/cache.t

$ prove

## Known Issues

- Caching can result in hard to find bugs because it isn't clear which version
  of the output is being used. When caching, cache thoughtfully and invalidate
  a cache when in doubt.

## Documentation

Generating the documentation requires [barkdown][4].

`$ ./README.bd > ./README.md`

## License

GNU General Public License 3.0

[1]:./t/date
[2]:https://perldoc.perl.org/prove.html
[3]:https://en.wikipedia.org/wiki/Memoization
[4]:https://github.com/bas080/barkdown
